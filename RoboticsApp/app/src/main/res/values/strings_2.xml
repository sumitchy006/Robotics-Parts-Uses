<?xml version="1.0"?>

<resources>


    <string name="set_up_t1">

        Arduino Uno বোর্ডের প্রধান অংশ সম্পর্কে জানার পরে, আমরা Arduino আইডিই সেট আপ করতে শিখতে প্রস্তুত। একবার আমরা এটি শিখি,
        যা Arduino বোর্ডে আমাদের প্রোগ্রাম আপলোড করতে help করবে ।

এই বিভাগে, আমরা সহজ ধাপে শিখব, আমাদের কম্পিউটারে Arduino IDE কীভাবে সেট আপ করবেন এবং USB কেবলের মাধ্যমে প্রোগ্রামটি বোর্ড এ upload করবেন ।

\n\nStep-1 ঃ\n\n
        প্রথমে আপনার Arduino বোর্ড (আপনি আপনার পছন্দের বোর্ড চয়ন করতে পারেন) এবং একটি USB তার থাকতে হবে। আপনি যদি Arduino UNO,
        Arduino Nano, Arduino Mega 2560 ব্যবহার করেন তবে আপনাকে একটি আদর্শ USB কেবল (একটি প্লাগ টু প্লাগ)
        প্রয়োজন হবে


\n\nStep-2 - Arduino আইডিই সফ্টওয়্যার ডাউনলোড করুনঃ\n\n

আপনি Arduino অফিসিয়াল ওয়েবসাইটে ডাউনলোড পৃষ্ঠা থেকে Arduino আইডিই এর বিভিন্ন সংস্করণ পেতে পারেন। আপনাকে অবশ্যই আপনার সফটওয়্যারটি নির্বাচন করতে
        হবে, যা আপনার অপারেটিং সিস্টেমের সাথে সামঞ্জস্যপূর্ণ (উইন্ডোজ, আইওএস, বা লিনাক্স)। আপনার ফাইল ডাউনলোড সম্পূর্ণ হলে ফাইলটি আনজিপ করুন।

    </string>

    <string name="set_up_t2">

\n\nStep-3 - আপনার বোর্ড এর powerঃ\n\n

Arduino Uno,Mega এবং Arduino Nano স্বয়ংক্রিয়ভাবে উভয় থেকে কম্পিউটার বা কম্পিউটারের বাইরের পাওয়ার সাপ্লাই থেকে শক্তি আনতে পারে।



USB তারের ব্যবহার করে আপনার কম্পিউটারে Arduino বোর্ডটি সংযুক্ত করুন। সবুজ LED  উজ্জ্বল হয়ে উঠবে।

\n\nStep-4 - Arduino আইডিই চালু করুনঃ\n\n

আপনার Arduino আইডিই সফ্টওয়্যার ডাউনলোড করার পরে, আপনি ফোল্ডার আনজিপ করতে হবে। ফোল্ডারের ভিতরে, আপনি একটি ইনফিনিটি লেবেল (application.exe)
        সহ অ্যাপ্লিকেশন আইকনটি খুঁজে পেতে পারেন। আইডিই start করতে আইকনের উপর ডাবল ক্লিক করুন।

     </string>

    <string name="set_up_t3">

\n\nStep-5 - আপনার প্রথম প্রোজেক্ট খুলুনঃ\n\n

একবার সফ্টওয়্যার শুরু হলে, আপনার দুটি বিকল্প রয়েছে -\n

একটি নতুন প্রোজেক্ট তৈরি করুন। অথবা,
একটি বিদ্যমান প্রোজেক্ট উদাহরণ খুলুন।\n
একটি নতুন প্রোজেক্ট তৈরি করতে, File → new নির্বাচন করুন।\n


        </string>


    <string name="set_up_t4">

একটি বিদ্যমান প্রকল্প উদাহরণ খুলতে, File → example → বুনিয়াদি → ব্লিঙ্ক নির্বাচন করুন\n

এখানে, আমরা ব্লিঙ্ক নাম সহ একটি উদাহরণ নির্বাচন করছি। এটি কিছু সময় বিলম্ব সঙ্গে LED চালু এবং বন্ধ করে। আপনি তালিকা থেকে অন্য কোন উদাহরণ নির্বাচন করতে পারেন।

\n\nStep-6 - আপনার Arduino বোর্ড নির্বাচন করুনঃ\n\n

আপনার প্রোগ্রামটি বোর্ডে আপলোড করার সময় কোনও ত্রুটি এড়ানোর জন্য আপনাকে অবশ্যই সঠিক Arduino বোর্ডের নাম নির্বাচন করতে হবে যা আপনার কম্পিউটারের সাথে সংযুক্ত বোর্ডের সাথে মিলে যায়।

 setting→ Board এ যান এবং আপনার বোর্ড নির্বাচন করুন।

এখানে, আমরা Arduino Uno বোর্ড নির্বাচন করেছি, তবে আপনি যে বোর্ডটি ব্যবহার করছেন সেটি মিলে নামটি অবশ্যই নির্বাচন করুন।

\n\nStep-7 - আপনার সিরিয়াল পোর্ট নির্বাচন করুনঃ\n\n

Arduino বোর্ডের সিরিয়াল ডিভাইস নির্বাচন করুন। setting→ serial port মেনু যান। এটি COM3 বা তার বেশি হতে পারে (COM1 এবং COM2 সাধারণত হার্ডওয়্যার সিরিয়াল পোর্টের জন্য সংরক্ষিত থাকে)। খুঁজে বের করতে, আপনি আপনার Arduino বোর্ডটি সংযোগ বিচ্ছিন্ন করতে এবং মেনুটি পুনরায় খুলতে পারেন, অ্যারিনিনো বোর্ডের অদৃশ্য হওয়া এন্ট্রিটি হতে পারে। বোর্ড পুনরায় সংযোগ করুন এবং যে সিরিয়াল পোর্ট নির্বাচন করুন।

\n\nStep-8 - আপনার বোর্ডে প্রোগ্রাম আপলোড করুনঃ\n\n

বোর্ডে আমাদের প্রোগ্রাম আপলোড করতে আমাদের অবশ্যই Arduino আইডিই টুলবারে উপস্থিত প্রতীকটির ব্যবহার করতে হবে।


    </string>

    <string name="structure_t1">
        এই অধ্যায়ে, আমরা গভীরতা, Arduino প্রোগ্রামের structure অধ্যয়ন করব । Arduino সফ্টওয়্যার  open-source।
        জাভা এনভায়রনমেন্টের জন্য উৎস কোডটি GPL এর অধীনে প্রকাশ করা হয় এবং সি / সি ++ মাইক্রোকন্ট্রোলার লাইব্রেরি LGPL এর অধীনে রয়েছে।

\n\nSketch - \n\n
        প্রথম নতুন পরিভাষা হল "স্কেচ" নামক Arduino প্রোগ্রাম।

\n\nStructure:\n\n
Arduino প্রোগ্রাম তিনটি প্রধান অংশে বিভক্ত করা যেতে পারে:  Structure, Values (variables and constants), and Functions।
        এই টিউটোরিয়ালে, আমরা Arduino সফটওয়্যার প্রোগ্রাম, ধাপে ধাপে, এবং কোন সিনট্যাক্স বা compilation error ছাড়াই প্রোগ্রামটি লিখতে পারি
        তা সম্পর্কে আমরা শিখব।

\n\nআমাদের Structure সঙ্গে শুরু করা যাক। সফ্টওয়্যার Structure দুটি প্রধান ফাংশন গঠিত -\n\n


       (1) Setup( ) function

        \n (2) Loop( ) function\n



    </string>
    <string name="structure_t2">

        (1)Void setup ( ) {

}\n\n
        উদ্দেশ্য - একটি স্কেচ শুরু হলে সেটআপ () ফাংশন বলা হয়। ভেরিয়েবলগুলি initialize করতে, পিন মোডগুলি, লাইব্রেরিগুলি ব্যবহার করে শুরু করতে
         এটি ব্যবহার করুন।

        যেকোনো Arduino programe চালু ক্রলে প্রথম এই


        সেটআপ ফাংশন শুধুমাত্র একবার run হবে, প্রতিটি power up Arduino board রিসেট বা রিসেট করার পরে।



\n\n(2)Void Loop () {

}\n\n
উদ্দেশ্য - একটি setup() ফাংশন তৈরি করার পরে, যা প্রাথমিক মানেরগুলিকে nitializes করে এবং সেট করে, লুপ () ফাংশনটি loop এর ভিতরে যে statement
       গুলো আছে সেগুলো প্রতিটি একটি একটি করে Run করে আবার Loop এর প্রতম থেকে Run করে ।  নির্দিষ্ট শর্ত পূর্ণ না হও্যা পর্যন্ত এভাবে একটি Loop
       চলতে থাকে ।  Arduino তে Loop Function একটি অসীম Loop তৈরী করে।
       Loop Function এর মধ্যে যে নির্দেশগুলো লিখব সেগুলো একে একে চলবে থাকবে অসীম সময় ধরে ।Arduino বোর্ড সক্রিয়ভাবে নিয়ন্ত্রণ করার জন্য এটি
        ব্যবহার করুন।



        </string>

    <string name="coditional_t1">
        সিদ্ধান্ত গ্রহণ কাঠামো প্রোগ্রামার দ্বারা মূল্যায়ন বা পরীক্ষা করা এক বা একাধিক শর্ত উল্লেখ করে । শর্তটি সত্য হিসাবে নির্ধারিত হলে
        বিবৃতি বা বিবৃতিগুলি কার্যকর করা উচিত এবং বিকল্পভাবে যদি শর্তটি মিথ্যা বলে নির্ধারিত হয় তবে অন্যান্য বিবৃতি কার্যকর করা উচিত।

 প্রোগ্রামগুলির বেশিরভাগ ক্ষেত্রে পাওয়া একটি সাধারণ সিদ্ধান্ত গ্রহণ কাঠামোর সাধারণ ফর্মটি অনুসরণ করে -

 \n\nDecision Making:\n\n
Control Statements বিবৃতিগুলি কোডের উপাদান যা প্রোগ্রাম কার্যকর করার প্রবাহ নিয়ন্ত্রণ করে। তারা -


\n\n(1)If statement:\n\n

এটি বন্ধনী এবং একটি বিবৃতি বা বিবৃতি ব্লক মধ্যে একটি expression লাগে। expression টি সত্য হলে বিবৃতি বা বিবৃতির বিবাদ কার্যকর হয়
        অন্যথায় এই বিবৃতিগুলি বাদ দেওয়া হয়।

\n\n(2) If …else statement:\n\n


একটি if statement একটি else statement অনুসরণ করা যেতে পারে, যাদি এক্সপ্রেশন মিথ্যা তখন সঞ্চালিত হয়।

\n\n(3) If…else if …else statement:\n\n

if statement অন্য একটি বিকল্প দ্বারা অনুসরণ করা যেতে পারে ... else if, যদি একক ব্যবহার করে বিভিন্ন শর্ত পরীক্ষা করতে খুব
        দরকারী হয় ... অন্যথায় else statement ।

\n\n(4)switch case statement:\n\n


if statements এর মতোই, switch...case প্রোগ্রামগুলি প্রোগ্রামারদের বিভিন্ন কোডগুলি নির্দিষ্ট করার জন্য অনুমতি দিয়ে প্রোগ্রামগুলির প্রবাহ নিয়ন্ত্রণ করে
        যা বিভিন্ন অবস্থানে কার্যকর করা উচিত।

\n\n(5)Conditional Operator ? :\n\n

Conditional Operator ?  : সি মধ্যে একমাত্র  ternary operator।


    </string>

    <string name="loop_t1">
        প্রোগ্রামিং ভাষা বিভিন্ন নিয়ন্ত্রণ কাঠামো প্রদান করে যা আরও জটিল execution paths.
 কার্যকর করার অনুমতি দেয়।

একটিloop statement আমাদের একটি বিবৃতি বা বিবৃতি group একাধিক বার চালানোর অনুমতি দেয় এবং নিম্নলিখিত প্রোগ্রামিং ভাষার বেশিরভাগ লুপ বিবৃতির সাধারণ
        ফর্মটি অনুসরণ করে -

\n\nLoop Architecture:\n\n
সি প্রোগ্রামিং ভাষা looping প্রয়োজনীয়তা হ্যান্ডেল করতে নিম্নলিখিত ধরনের loops উপলব্ধ করা হয়।



\n\n(1)while loop:\n\n


while loops ক্রমাগত লুপ, এবং infinitely,যত সময় পর্যন্ত বন্ধনী ভিতরে expression  মিথ্যা হবে না। কিছু পরীক্ষিত পরিবর্তনশীল পরিবর্তন করা আবশ্যক,
        বা যখন লুপ exit করা হবে না।

\n\n(2)do…while loop:\n\n

do…while loop while loop এর অনুরূপ। যখন লুপে, লুপের body তে সঞ্চালনের পূর্বে লুপটির শুরুতে লুপ-চলমান অবস্থা পরীক্ষা করা হয়।

\n\n(3)For loop:\n\n

একটি for loop জন্য একটি statements পূর্বনির্ধারিত সংখ্যা সঞ্চালিত। লুপের জন্য কন্ট্রোল এক্সপ্রেশনটি লুপের বন্ধনীগুলির জন্য সম্পূর্ণরূপে পরীক্ষা, এবং ম্যানিপুলেশন করা হয়।

\n\n(4)Nested Loop:\n\n

সি ভাষা আপনি এক লুপ ভিতরে অন্য  লুপ ব্যবহার করতে পারবেন।

\n\n(5)Infinite loop:\n\n

এটি লুপটির কোন অবসানহীন শর্ত নেই, তাই লুপটি অসীম হয়ে যায়।

        </string>


    <string name="digitalRead">

[ডিজিটাল  I / O]
\nDescription :\n
একটি নির্দিষ্ট ডিজিটাল পিন থেকে, উচ্চ বা নিম্ন লভ্য মান পড়ুন।

\nSyntax :\n
digitalRead (PIN)\n

\nParameters :\n
পিন: আপনি পড়তে চান ডিজিটাল পিন নম্বর

\nReturns :\n
উচ্চ বা নিম্ন


\nExample Code :\n
পিন 7 হিসাবে একই পিনের মধ্যে 13 সেট করে, একটি ইনপুট হিসাবে ঘোষণা করা হয়।\n

\nint ledPin = 13; // ডিজিটাল পিন 13 সংযুক্ত
\nint inPin = 7; // pushbutton ডিজিটাল পিন 7 সংযুক্ত
\nint Val = 0; // পরিবর্তনশীল মান পড়া সংরক্ষণ করুন

\n\nvoid setup()\n
{
  \nPinMode (ledPin, OUTPUT);// আউটপুট হিসাবে ডিজিটাল পিন 13 সেট
  \npinMode(inPin, INPUT); // ইনপুট হিসাবে ডিজিটাল পিন 7 সেট\n
}

\n\nvoid loop()\n
{
    \nval = digitalRead(inPin); // ইনপুট পিন পড়ুন
    \ndigitalWrite(ledPin, val); // বোতাম এর মান থেকে LED সেট\n
}
\n\nনোট এবং সতর্কতা :\n
যদি পিনটি কোনও সাথে সংযুক্ত না থাকে, তবে digitalRead()  High বা Low ফিরে যেতে পারে (এবং এটি এলোমেলোভাবে পরিবর্তন করতে পারে)।

এনালগ ইনপুট পিনগুলি digital pins, referred to as A0, A1 ইত্যাদি হিসাবে উল্লেখ করা হয়।


        </string>
    <string name="digitalWrite">

[Digital I/O]
\nDescription :\n
একটি ডিজিটাল পিন একটি High বা একটি Low Value লিখুন।

যদি পিনটি pinMode() এর সাথে একটি OUTPUT রূপে কনফিগার করা থাকে তবে তার ভোল্টেজটি নিম্ন মানের জন্য 5V (বা 3.3V বোর্ডগুলিতে 3.3V বোর্ড) HIGH, 0V (ground)
        LOW জন্য সেট করা হবে।

যদি পিনটি একটি ইনপুট হিসাবে কনফিগার করা থাকে, তবে digitalWrite()  ইনপুট পিনের অভ্যন্তরীণ pullup enable (HIGH) বা disable (LOW)  সক্ষম করবে।
        অভ্যন্তরীণ পুল-আপ প্রতিরোধক সক্ষম করতে pinMode()
        কে INPUT_PULLUP এ সেট করার পরামর্শ দেওয়া হয়। আরও তথ্যের জন্য ডিজিটাল পিন টিউটোরিয়াল দেখুন।

যদি আপনি pinMode () থেকে OUTPUT তে সেট না করেন এবং digitalWrite(HIGH) কল করার সময় একটি LED এ একটি পিনের সাথে সংযোগ স্থাপন করেন তবে LEDটি
        ধীর প্রদর্শিত হতে পারে। স্পষ্টভাবে  pinMode(), digitalWrite()  অভ্যন্তরীণ পুল-আপ প্রতিরোধক সক্ষম করবে, যা একটি বড় বর্তমান-সীমাবদ্ধ প্রতিরোধক হিসাবে কাজ করে।

\nSyntax :\n
digitalWrite(pin, value)

\nParameters :\n
পিন: পিন সংখ্যা

মান: HIGH or LOW


\nReturns :\n
কিছু না

\nExample Code :\n
কোডটি ডিজিটাল পিন 13 একটি আউটপুট তৈরি করে এবং একে অপরকে গতিতে উচ্চ এবং নিম্নের মধ্যে পরিবর্তনের মাধ্যমে এটি টগল করে।

\nvoid setup()\n
{
  \npinMode(13, OUTPUT);   // আউটপুট হিসাবে ডিজিটাল পিন 13 সেট\n
}

\n\nvoid loop()\n
{
  \ndigitalWrite(13, HIGH);  // ডিজিটাল পিন 13 সেট
  \ndelay(1000);  // একটি দ্বিতীয় জন্য অপেক্ষা করে
  \ndigitalWrite(13, LOW);  // বন্ধ ডিজিটাল পিন 13 সেট
 \n delay(1000);  // একটি দ্বিতীয় জন্য অপেক্ষা করে\n
}
\n\nনোট এবং সতর্কতা :\n
এনালগ ইনপুট পিনগুলি digital pins, referred to as A0, A1, ইত্যাদি হিসাবে উল্লেখ করা হয়।

        </string>
    <string name="Pin_mode">

[Digital I/O]
\nDescription :\n
একটি ইনপুট বা আউটপুট হিসাবে আচরণ করতে নির্দিষ্ট পিন কনফিগার করে। পিনের কার্যকারিতা সম্পর্কে বিস্তারিত জানার জন্য (ডিজিটাল পিন) এর বিবরণ দেখুন।

Arduino 1.0.1 হিসাবে, INPUT_PULLUP মোড সহ অভ্যন্তরীণ পুলআপ প্রতিরোধক সক্ষম করা সম্ভব। উপরন্তু, INPUT মোড স্পষ্টভাবে অভ্যন্তরীণ pullups
        অক্ষম করে।

\nSyntax :\n
pinMode(pin, mode)

\nParameters :\n
পিন: পিনের সংখ্যা যা আপনি সেট করতে চান

\nMode :\n ইনপুট, আউটপুট, অথবা INPUT_PULLUP। (কার্যকারিতার আরও সম্পূর্ণ বিবরণের জন্য (ডিজিটাল পিন) পৃষ্ঠাটি দেখুন।)

\nReturns :\n
কিছু না

\nExample Code :\n
কোডটি ডিজিটাল পিন 13 আউটপুট করে এবং এটি উচ্চ এবং নিম্নে টগল করে

\nvoid setup()\n
{
  \nPinMode (13, আউটপুট); // আউটপুট হিসাবে ডিজিটাল পিন 13 সেট
}

\n\nvoid loop()\n
{
  \ndigitalWrite(13, HIGH);  // ডিজিটাল পিন 13 সেট
  \ndelay(1000); // একটি দ্বিতীয় জন্য অপেক্ষা করে
  \ndigitalWrite(13, LOW);  // বন্ধ ডিজিটাল পিন 13 সেট
  \ndelay(1000);  // একটি দ্বিতীয় জন্য অপেক্ষা করে\n
}
\n\nনোট এবং সতর্কতা :\n
এনালগ ইনপুট পিনগুলি ডিজিটাল পিন হিসাবে ব্যবহার করা যেতে পারে, এটি A0, A1, ইত্যাদি হিসাবে উল্লেখ করা হয়।


    </string>

    <string name="analogRead">
[Analog I/O]\n
\nDescription :\n
নির্দিষ্ট এনালগ পিন থেকে মান পড়ুন। Arduino বোর্ড একটি 6 চ্যানেল (মিনি এবং ন্যানো উপর 8 চ্যানেল, 16 মেগা), ডিজিটাল রূপান্তরকারী 10 বিট এনালগ রয়েছে।
        এটি 0 এবং 1023 এর মধ্যে পূর্ণসংখ্যা মানগুলিতে 0 এবং 5 ভোল্টের মধ্যে ইনপুট ভোল্টেজগুলি মানচিত্র করবে। এটি প্রতি ইউনিটটির 5 ভোল্ট / 1024 ইউনিট
        বা .0049 ভোল্ট (4.9 এমভি) এর রিডিংগুলির মধ্যে একটি রেজোলিউশন উত্পন্ন করবে। ইনপুট পরিসীমা এবং রেজল্যুশন analogReference () ব্যবহার করে
        পরিবর্তন করা যেতে পারে।

এনালগ ইনপুট পড়তে প্রায় 100 মাইক্রোসেকেন্ড (0.0001 গুলি) লাগে, তাই সর্বাধিক পড়ার হার প্রায় 10,000 বার।

\nSyntax :\n
analogRead (PIN)

\nParameters :\n
পিন: এনালগ ইনপুট পিন থেকে সংখ্যাটি পড়ুন (বেশিরভাগ বোর্ডগুলিতে 0 থেকে 5, মিনি এবং ন্যানোতে 0 থেকে 7, মেগা থেকে 0 থেকে 15)

\nReturns :\n
int (0 থেকে 1023)

\nExample Code :\n
কোড analogPin এ ভোল্টেজ পড়তে এবং এটি প্রদর্শন করে।

\nint analogPin = 3; // potentiometer wiper (middle টার্মিনাল) এনালগ পিন 3 সাথে সংযুক্ত
                       বাইরে মাটিতে এবং + 5V সীসা
\nint Val = 0; // পরিবর্তনশীল মান পড়া পড়তে

\n\nvoid setup()\n
{
  \nSerial.begin (9600); // সেটআপ সিরিয়াল\n
}

\n\nvoid loop()\n
{
 \nVal = analogRead (analogPin); // ইনপুট পিন পড়ুন
  \nSerial.println (Val); // ডিবাগ মান\n
}
\n\nনোট এবং সতর্কতা :\n
যদি এনালগ ইনপুট পিনটি কোনও সাথে সংযুক্ত না হয়, তবে analogRead () দ্বারা ফেরত মানটি অনেকগুলি কারণের উপর ভিত্তি করে উদ্বৃত্ত হবে (উদাঃ অন্যান্য অ্যালালগ ইনপুটগুলির মান, বোর্ডে আপনার হাত কতটা বন্ধ রয়েছে ইত্যাদি)।

        </string>

    <string name="analogWrite">

[Analog I/O]
\nDescription :\n
একটি পিন থেকে একটি এনালগ মান (PWM তরঙ্গ) লিখেছেন। বিভিন্ন উজ্জ্বলতা এ একটি LED light বা বিভিন্ন গতিতে একটি মোটর ড্রাইভ ব্যবহার করা যেতে পারে।
        AnalogWrite () এ একটি কল করার পরে, পিনটি একই পিনে analogWrite () (অথবা digitalRead() বা digitalWrite() কে পরবর্তী কল পর্যন্ত
        পরবর্তী কল পর্যন্ত নির্দিষ্ট দায়িত্ব চক্রের স্থির বর্গাকার তরঙ্গ তৈরি করবে। সর্বাধিক পিনে PWM সংকেত প্রায় 490 Hz। ইউনো এবং একই বোর্ডগুলিতে
        , পিনগুলি 5 এবং 6 এর প্রায় 980 হিজরের ফ্রিকোয়েন্সি রয়েছে।

অধিকাংশ আর্ডিনো বোর্ডগুলিতে (ATmega168 or ATmega328P), এই ফাংশনটি 3, 5, 6, 9, 10, এবং 11 পিনে কাজ করে। এডুডিওনো মেগায় এটি 2 - 13 এবং 44
        - 46 পিনে কাজ করে। পুরানো Arduino ATMEga8 এর সাথে বোর্ডগুলি শুধুমাত্র পিন 9, 10, এবং 11 এ analogWrite() সমর্থন করে।
Arduino DUE পিন 2 থেকে 13 পিনে analogWrite () সমর্থন করে, প্লাস DAC0 এবং DAC1 পিন। PWM পিনের বিপরীতে, DAC0 এবং DAC1 ডিজিটাল থেকে এনালগ
        রূপান্তরকারী এবং সত্যিকারের এনালগ আউটপুট হিসাবে কাজ করে।
AnalogWrite () কে কল করার আগে আপনাকে পিনমোড () কে আউটপুট হিসেবে সেট করতে কল করতে হবে না।
AnalogWrite ফাংশন এনালগ পিন বা analogRead ফাংশনটির সাথে কিছু করার নেই।

\nSyntax :\n
analogwrite (পিন, মান)

\nParameters :\n
পিন: লিখতে পিন। অনুমোদিত তথ্য প্রকার: int।
মান: দায়িত্ব চক্র: 0 (সর্বদা বন্ধ) এবং 255 (সর্বদা) এর মধ্যে। অনুমোদিত তথ্য প্রকার: int

\nReturns :\n
কিছু না

\nExample Code :\n
Potentiometer থেকে পড়া মান অনুপাত আনুপাতিক আউটপুট সেট করে।\n

\nint ledPin = 9;   // LED ডিজিটাল পিন 9 সংযুক্ত
\nint analogPin = 3; // potentiometer এনালগ পিন 3 সংযুক্ত
\nint Val = 0; // পরিবর্তনশীল মান পড়া সংরক্ষণ করুন

\n\nvoid setup()\n
{
  \npinMode(ledPin, OUTPUT);   // আউটপুট হিসাবে পিন সেট\n
}

\n\nvoid loop()\n
{
  \nVal = analogRead (analogPin); // ইনপুট পিন পড়ুন
  \nanalogwrite (ledPin, Val / 4); // analogRead মান 0 থেকে 1023 এ যান, analogWrit মান 0 থেকে 255\n
}
\n\nনোট এবং সতর্কতা :\n
পিন 5 এবং 6 এ উত্পাদিত PWM আউটপুটগুলির তুলনায় উচ্চতর প্রত্যাশিত দায়িত্ব চক্র থাকবে। এটি মিলিস () এবং বিলম্ব () ফাংশনগুলির সাথে মিথস্ক্রিয়াগুলির কারণে হয়, যা একই PWM আউটপুটগুলি তৈরি করতে ব্যবহৃত অভ্যন্তরীণ টাইমার ভাগ করে। এটি বেশিরভাগ নিম্ন দায়িত্ব-চক্র সেটিংস (উদাঃ 0 - 10) এ লক্ষ্য করা হবে এবং এর ফলে পিনগুলি 5 এবং 6 এ আউটপুট বন্ধ করা 0 এর একটি মান হতে পারে।

        </string>

    <string name="delay">

[TIME]
\nDescription :\n
প্রোগ্রামটির Pauses time (মিলিসেকেন্ডে) পরিমাণের জন্য প্যারামিটার হিসাবে নির্দিষ্ট করে। (একটি সেকেন্ডে 1000 মিলিসেকেন্ড আছে।)

\nSyntax :\n
delay(MS)

\nParameters :\n
ms: বিরতির জন্য মিলিসেকেন্ডগুলির সংখ্যা (স্বাক্ষরিত দীর্ঘ)

\nReturns :\n
কিছু না

\nExample Code :\n
কোড আউটপুট পিন toggling আগে এক সেকেন্ডের জন্য প্রোগ্রাম বিরতি।

\nint ledPin = 13;     // ডিজিটাল পিন 13 সংযুক্ত

\n\nvoid setup()\n
{
  \nPinMode (ledPin, OUTPUT); // আউটপুট হিসাবে ডিজিটাল পিন সেট\n
}

\n\nvoid loop()\n
{
 \n digitalWrite(ledPin, HIGH); // উপর LED সেট
 \ndelay(1000); // একটি দ্বিতীয় জন্য অপেক্ষা করে
 \ndigitalWrite(ledPin, LOW);  // বন্ধ LED সেট
  \ndelay(1000); // একটি দ্বিতীয় জন্য অপেক্ষা করে\n
}
\n\nনোট এবং সতর্কতা :\n
delay() ফাংশনটির সাথে একটি জ্বলজ্বলে LED তৈরি করা সহজ, এবং অনেকগুলি স্কেচগুলি স্যুইচ ডিবাউন্সিংয়ের মতো কাজগুলির জন্য ক্ষণ বিলম্বের ব্যবহার করে,
        একটি স্কেচে বিলম্ব () এর ব্যবহার উল্লেখযোগ্য ত্রুটিযুক্ত। সেন্সরগুলির অন্য কোনও পাঠ্য, গাণিতিক হিসাব বা পিন ম্যানিপুলেশন বিলম্বের ফাংশনের সময়
        চলতে পারে না, তাই কার্যত এটি অন্যতম অন্যান্য ক্রিয়াকলাপকে স্থগিত করে। সময় নিয়ন্ত্রণ নিয়ন্ত্রণ বিকল্প পদ্ধতির জন্য Millis () ফাংশন এবং নীচের
        sited স্কেচ দেখতে। আর্জিনো স্কেচ খুব সহজ না হওয়া পর্যন্ত 10 টি মিলিসেকেন্ডের বেশি সময়কালের ইভেন্টের সময়সীমার জন্য বিলম্বিত প্রোগ্রামারগুলি
        বেশি বুদ্ধিমান প্রোগ্রামারগুলি বিলম্ব () ব্যবহার থেকে বিরত থাকে।

কিছু জিনিস চলতে থাকে তবে বিলম্ব () ফাংশনটি Atmega চিপ নিয়ন্ত্রণ করছে তবে বিলম্বের ফাংশন বাধাগুলি অক্ষম করে না। RX পিনে প্রদর্শিত সিরিয়াল যোগাযোগ রেকর্ড
        করা হয়, PWM (analogWrite) মান এবং পিন স্টেটগুলি রক্ষণাবেক্ষণ করা হয়, এবং অন্তর্বর্তীগুলি তাদের কাজ হিসাবে কাজ করবে।

        </string>
    <string name="delay_Microseconds">
        [TIME]
\nDescription :\n
প্রোগ্রামটিকে সময়সীমার জন্য (মাইক্রোসেকেন্ডে) প্যারামিটার হিসাবে নির্দিষ্ট করে। একটি millisecond মধ্যে একটি হাজার মাইক্রোসেকেন্ড, এবং এক সেকেন্ডে একটি
        মিলিয়ন মাইক্রোসেকেন্ড আছে।

বর্তমানে, সর্বনিম্ন মূল্য যা সঠিক বিলম্ব তৈরি করবে 16383। ভবিষ্যতে আর্ডিনোতে এটি পরিবর্তন হতে পারে। কয়েক হাজার মাইক্রোসেকেন্ডের চেয়ে বেশি বিলম্বের জন্য,
        আপনার পরিবর্তে বিলম্ব () ব্যবহার করা উচিত।

\nSyntax :\n
delayMicroseconds (US)

\nParameters :\n
আমাদের: বিরতির জন্য মাইক্রোসেকেন্ড সংখ্যা (unsigned int)


\nReturns :\n
কিছু না

\nExample Code :\n
কোড আউটপুট পিন হিসাবে কাজ করতে পিন নম্বর 8 কনফিগার করে। এটি প্রায় 100 মাইক্রোসেকেন্ড সময়ের ডাল একটি ট্রেন পাঠায়। আনুমানিক কোড কোড অন্যান্য
        নির্দেশাবলী কার্যকর করা হয়।

\nint outPin = 8; // ডিজিটাল পিন 8

\n\nvoid setup()\n
{
   \npinMode(outPin, OUTPUT);  // আউটপুট হিসাবে ডিজিটাল পিন সেট\n
}

\n\nvoid loop()\n
{
  \ndigitalWrite(outPin, HIGH); // পিন সেট করে
  \ndelayMicroseconds (50); // 50 মাইক্রোসেকেন্ডের জন্য বিরতি
  \ndigitalWrite(outPin, LOW);  // বন্ধ পিন সেট
  \ndelayMicroseconds (50); // 50 মাইক্রোসেকেন্ডের জন্য বিরতি\n
}
\n\nনোট এবং সতর্কতা :\n
এই ফাংশন পরিসীমা 3 মাইক্রোসেকেন্ড এবং উপরে খুব সঠিকভাবে কাজ করে। আমরা বিলম্বের নিশ্চয়তা দিতে পারি না মাইক্রোসেকেন্ড ছোট বিলম্বের জন্য সঠিকভাবে
        সঞ্চালন করবে।


        </string>

    <string name="delay_micros">


[TIME]
\nDescription :\n
Arduino বোর্ড বর্তমান প্রোগ্রাম চলমান শুরু থেকে মাইক্রোসেকেন্ড সংখ্যা প্রদান করে। এই সংখ্যাটি প্রায় 70 মিনিটের পরে ওভারফ্লো (শূন্যে ফিরে যান) হবে। 16
        মেগাহার্টজ আর্ডিনো বোর্ডগুলিতে (উদাঃ ডুমিলানোভ এবং ন্যানো), এই ফাংশনে চারটি মাইক্রোসেকেন্ডের রেজোলিউশন রয়েছে (অর্থাত ফেরত মান সর্বদা চারটি
        একাধিক)। 8 MHz Arduino বোর্ডগুলিতে (উদাঃ লিলিপ্যাড) এই ফাংশনে আটটি মাইক্রোস্কেন্ড রয়েছে।

\nSyntax :\n
time = micros()

\nParameters :\n
কিছু না

\nReturns :\n
Arduino বোর্ড বর্তমান প্রোগ্রাম চলমান শুরু থেকে মাইক্রোসেকেন্ড সংখ্যা প্রদান করে। (unsigned long)

\nExample Code :\n
Arduino বোর্ড শুরু হওয়ার পরে কোডটি মাইক্রোসেকেন্ডের সংখ্যা প্রদান করে।



\n\nvoid setup()\n
 {
        \n \t\t Serial.begin (9600);\n
}
\n\nvoid loop()\n
  {
  \nSerial.print("Time: ");
  \ntime = micros();

  \nSerial.println (সময়); // প্রিন্ট সময় থেকে শুরু প্রোগ্রাম
  \ndelay(1000); // বৃহৎ পরিমাণে তথ্য প্রেরণ না করার জন্য একটি সেকেন্ড অপেক্ষা করুন\n
}
\n\nনোট এবং সতর্কতা :\n
মিলিসেকেন্ডে 1000 মাইক্রোসেকেন্ড এবং এক সেকেন্ডে 1,000,000 মাইক্রোসেকেন্ড রয়েছে।

        </string>
    <string name="delay_millis">


[TIME]
\nDescription :\n
Arduino বোর্ড বর্তমান প্রোগ্রাম চলমান শুরু থেকে মিলিসেকেন্ড সংখ্যা প্রদান করে। প্রায় 50 দিন পরে, এই সংখ্যা ওভারফ্লো (শূন্যে ফিরে যান) হবে।

\nSyntax :\n
time = millis()

\nParameters :\n
কিছু না

\nReturns :\n
প্রোগ্রাম শুরু হওয়ার পরে মিলিসেকেন্ড সংখ্যা (অচেনা দীর্ঘ)

\nExample Code :\n
Arduino বোর্ড শুরু হওয়ার পর কোডটি Milllesecond পাঠ করে।



\n\nvoid setup()\n
 {
  \n \t\t Serial.begin (9600);\n
}
\n\nvoid loop()\n
 {
  \nSerial.print("Time: ");
  \ntime = millis();

  \nSerial.println(time);     // প্রিন্ট সময় থেকে শুরু প্রোগ্রাম
   \ndelay(1000); // বৃহৎ পরিমাণে তথ্য প্রেরণ না করার জন্য একটি সেকেন্ড অপেক্ষা করুন\n
}
\n\nনোট এবং সতর্কতা :\n
millis() -এর জন্য ফেরত মানটি একটি স্বাক্ষরিত দীর্ঘ, যদি প্রোগ্রামার int এর মতো ছোট ডাটা প্রকারের সাথে গাণিতিক কাজ করার চেষ্টা করে তবে লজিক ত্রুটিগুলি
        ঘটতে পারে। এমনকি স্বাক্ষরিত লম্বা ত্রুটির সম্মুখীন হতে পারে কারণ তার সর্বাধিক মানটি তার স্বাক্ষরিত প্রতিপক্ষের অর্ধেক।
        </string>





</resources>